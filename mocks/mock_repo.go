// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gitscan/internal/service/repo (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	database "github.com/gitscan/internal/database"
	report "github.com/gitscan/internal/report"
	rules "github.com/gitscan/rules"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockInterface) Clone() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockInterfaceMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockInterface)(nil).Clone))
}

// Init mocks base method.
func (m *MockInterface) Init(arg0, arg1 string, arg2 rules.Interface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1, arg2)
}

// Init indicates an expected call of Init.
func (mr *MockInterfaceMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init), arg0, arg1, arg2)
}

// Scan mocks base method.
func (m *MockInterface) Scan(arg0 database.DB, arg1 chan bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockInterfaceMockRecorder) Scan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockInterface)(nil).Scan), arg0, arg1)
}

// ViewReport mocks base method.
func (m *MockInterface) ViewReport(arg0 database.DB) (report.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewReport", arg0)
	ret0, _ := ret[0].(report.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewReport indicates an expected call of ViewReport.
func (mr *MockInterfaceMockRecorder) ViewReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewReport", reflect.TypeOf((*MockInterface)(nil).ViewReport), arg0)
}
