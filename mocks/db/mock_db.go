// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gitscan/internal/database (interfaces: DB)

// Package dbMocks is a generated GoMock package.
package dbMocks

import (
	reflect "reflect"

	database "github.com/gitscan/internal/database"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Finding mocks base method.
func (m *MockDB) Finding() database.FindingInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finding")
	ret0, _ := ret[0].(database.FindingInterface)
	return ret0
}

// Finding indicates an expected call of Finding.
func (mr *MockDBMockRecorder) Finding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finding", reflect.TypeOf((*MockDB)(nil).Finding))
}

// Info mocks base method.
func (m *MockDB) Info() database.InfoInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(database.InfoInterface)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockDBMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDB)(nil).Info))
}

// Location mocks base method.
func (m *MockDB) Location() database.LocationInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(database.LocationInterface)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockDBMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockDB)(nil).Location))
}

// Ping mocks base method.
func (m *MockDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDB)(nil).Ping))
}

// RawDB mocks base method.
func (m *MockDB) RawDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// RawDB indicates an expected call of RawDB.
func (mr *MockDBMockRecorder) RawDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDB", reflect.TypeOf((*MockDB)(nil).RawDB))
}

// UseTransaction mocks base method.
func (m *MockDB) UseTransaction(arg0 database.TransactionFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseTransaction indicates an expected call of UseTransaction.
func (mr *MockDBMockRecorder) UseTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTransaction", reflect.TypeOf((*MockDB)(nil).UseTransaction), arg0)
}
