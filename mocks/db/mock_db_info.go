// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gitscan/internal/database (interfaces: InfoInterface)

// Package dbMocks is a generated GoMock package.
package dbMocks

import (
	reflect "reflect"

	status "github.com/gitscan/constants/status"
	database "github.com/gitscan/internal/database"
	gomock "github.com/golang/mock/gomock"
)

// MockInfoInterface is a mock of InfoInterface interface.
type MockInfoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInfoInterfaceMockRecorder
}

// MockInfoInterfaceMockRecorder is the mock recorder for MockInfoInterface.
type MockInfoInterfaceMockRecorder struct {
	mock *MockInfoInterface
}

// NewMockInfoInterface creates a new mock instance.
func NewMockInfoInterface(ctrl *gomock.Controller) *MockInfoInterface {
	mock := &MockInfoInterface{ctrl: ctrl}
	mock.recorder = &MockInfoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoInterface) EXPECT() *MockInfoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInfoInterface) Create(arg0 database.Info) (database.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(database.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInfoInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInfoInterface)(nil).Create), arg0)
}

// Find mocks base method.
func (m *MockInfoInterface) Find(arg0 database.Info) (database.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(database.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockInfoInterfaceMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockInfoInterface)(nil).Find), arg0)
}

// FindByURLAndStatus mocks base method.
func (m *MockInfoInterface) FindByURLAndStatus(arg0 string, arg1 status.Info) (database.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByURLAndStatus", arg0, arg1)
	ret0, _ := ret[0].(database.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByURLAndStatus indicates an expected call of FindByURLAndStatus.
func (mr *MockInfoInterfaceMockRecorder) FindByURLAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByURLAndStatus", reflect.TypeOf((*MockInfoInterface)(nil).FindByURLAndStatus), arg0, arg1)
}

// Update mocks base method.
func (m *MockInfoInterface) Update(arg0 database.Info) (database.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(database.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInfoInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInfoInterface)(nil).Update), arg0)
}
